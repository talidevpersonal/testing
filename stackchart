import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';

const StackChart = ({ data }) => {
  const chartRef = useRef(null);
  const width = 400;
  const height = 300;
  const barWidth = 60;
  const gap = 20;

  useEffect(() => {
    const svg = d3.select(chartRef.current)
      .attr("width", width)
      .attr("height", height);

    // Clear previous contents
    svg.selectAll("*").remove();

    const yScale = d3.scaleLinear()
      .domain([d3.min(data, d => d.loser), d3.max(data, d => d.gainer)])
      .range([height - 50, 50]);

    data.forEach((d, i) => {
      const xPosition = i * (barWidth + gap);

      // Draw gainer section (positive part)
      svg.append("rect")
        .attr("x", xPosition)
        .attr("y", yScale(d.gainer))
        .attr("width", barWidth)
        .attr("height", yScale(0) - yScale(d.gainer))
        .attr("fill", "#4A73F3"); // Blue color for gainers

      // Draw loser section (negative part)
      svg.append("rect")
        .attr("x", xPosition)
        .attr("y", yScale(0))
        .attr("width", barWidth)
        .attr("height", yScale(d.loser) - yScale(0))
        .attr("fill", "#F4C13C"); // Orange color for losers

      // Add labels for gainer and loser values
      svg.append("text")
        .attr("x", xPosition + barWidth / 2)
        .attr("y", yScale(d.gainer) - 5)
        .attr("text-anchor", "middle")
        .attr("fill", "white")
        .style("font-size", "12px")
        .text(d.gainer);

      svg.append("text")
        .attr("x", xPosition + barWidth / 2)
        .attr("y", yScale(d.loser) + 15)
        .attr("text-anchor", "middle")
        .attr("fill", "white")
        .style("font-size", "12px")
        .text(d.loser);

      // Add label below each bar for the metric name
      svg.append("text")
        .attr("x", xPosition + barWidth / 2)
        .attr("y", height - 10)
        .attr("text-anchor", "middle")
        .style("font-size", "14px")
        .text(d.label);

      // Add percentage change at the top
      svg.append("text")
        .attr("x", xPosition + barWidth / 2)
        .attr("y", 30)
        .attr("text-anchor", "middle")
        .style("font-size", "12px")
        .style("font-weight", "bold")
        .attr("fill", "green")
        .text(d.percentage);
    });
  }, [data]);

  return <svg ref={chartRef}></svg>;
};

export default StackChart;



import './App.css';
import StackChart from './StackChart';

const transactions = [
  { category: 'Revenue', date: '2023-01-01', value: 1000000 },
  { category: 'Revenue', date: '2024-01-01', value: 1300000 },
  { category: 'Balances', date: '2023-01-01', value: 500000 },
  { category: 'Balances', date: '2024-01-01', value: 515000 },
  { category: 'Outstanding', date: '2023-01-01', value: 700000 },
  { category: 'Outstanding', date: '2024-01-01', value: 660000 },
  { category: 'Limits', date: '2023-01-01', value: 800000 },
  { category: 'Limits', date: '2024-01-01', value: 825000 },
];

// const data = [
//   { label: "Revenue", gainer: 4.3, loser: -2.4, percentage: "3.25%" },
//   { label: "Balances", gainer: 2.5, loser: -4.4, percentage: "3.05%" },
//   { label: "Outstanding", gainer: 3.5, loser: -1.8, percentage: "3.15%" },
//   { label: "Limits", gainer: 4.5, loser: -2.8, percentage: "3.35%" },
// ];

const calculatePercentageChange = (oldValue, newValue) => {
  return ((newValue - oldValue) / oldValue) * 100;
};

const getGainersAndLosers = (transactions, year1, year2) => {
  const year1Data = transactions.filter(d => d.date.startsWith(year1));
  const year2Data = transactions.filter(d => d.date.startsWith(year2));

  const gainersLosers = year1Data.map((item) => {
    const correspondingYear2Item = year2Data.find(d => d.category === item.category);
    if (!correspondingYear2Item) return null; // Skip if no match found for the second year

    const percentageChange = calculatePercentageChange(item.value, correspondingYear2Item.value);

    return {
      category: item.category,
      gainer: percentageChange > 0 ? percentageChange : 0,
      loser: percentageChange < 0 ? percentageChange : 0,
      percentage: `${percentageChange.toFixed(2)}%`
    };
  }).filter(Boolean); // Remove null entries

  return gainersLosers;
};

// Example usage:
const year1 = '2023';
const year2 = '2024';
const gainersLosers = getGainersAndLosers(transactions, year1, year2);


function App() {
  
  return (
    <div className="App">
       <h1>Financial Gainers and Losers</h1>
       <StackChart data={gainersLosers} />
    </div>
  );
}

export default App;
