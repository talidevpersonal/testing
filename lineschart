import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';

// Type definitions
interface DataPoint {
  date: string; // e.g., '2020-01-01'
  Revenue: number;
  Balances: number;
  Limit: number;
  Outstanding: number;
}

interface LinesChartProps {
  data: DataPoint[];
}

const LinesChart: React.FC<LinesChartProps> = ({ data }) => {
  const chartRef = useRef<SVGSVGElement>(null);
  const [selectedSeries, setSelectedSeries] = useState<Record<string, boolean>>({});

  const seriesNames = ["Revenue", "Balances", "Limit", "Outstanding"];

  useEffect(() => {
    // Initialize series selection
    const initialSelection = seriesNames.reduce((acc, series) => {
      acc[series] = true;
      return acc;
    }, {} as Record<string, boolean>);
    setSelectedSeries(initialSelection);
  }, [data]);

  useEffect(() => {
    if (!chartRef.current) return;

    const svg = d3.select(chartRef.current);
    svg.selectAll("*").remove(); // Clear existing content

    const width = 800;
    const height = 400;
    const margin = { top: 20, right: 60, bottom: 30, left: 50 };

    const parseDate = d3.timeParse("%Y-%m-%d")!;
    const parsedData = data.map(d => ({
      ...d,
      parsedDate: parseDate(d.date),
    }));

    const x = d3.scaleTime()
      .domain(d3.extent(parsedData, d => d.parsedDate) as [Date, Date])
      .range([margin.left, width - margin.right]);

    const y = d3.scaleLinear()
      .domain([
        0,
        d3.max(parsedData, d =>
          Math.max(...seriesNames.map(series => d[series as keyof DataPoint]))
        )! * 1.1,
      ])
      .range([height - margin.bottom, margin.top]);

    const colors = d3.scaleOrdinal<string>()
      .domain(seriesNames)
      .range(['#00C6AE', '#D62278', '#007BFF', '#FF9900']);

    const line = d3.line<DataPoint>()
      .x(d => x(d.parsedDate as Date))
      .y((d, _, series) => y(d[series as keyof DataPoint]));

    seriesNames.forEach(series => {
      if (!selectedSeries[series]) return;

      const seriesData = parsedData.map(d => ({
        parsedDate: d.parsedDate,
        value: d[series as keyof DataPoint],
      }));

      svg.append("path")
        .datum(seriesData)
        .attr("fill", "none")
        .attr("stroke", colors(series)!)
        .attr("stroke-width", 2)
        .attr("d", d3.line<{ parsedDate: Date; value: number }>()
          .x(d => x(d.parsedDate))
          .y(d => y(d.value))
        );
    });

    svg.append("g")
      .attr("transform", `translate(0,${height - margin.bottom})`)
      .call(d3.axisBottom(x));

    svg.append("g")
      .attr("transform", `translate(${margin.left},0)`)
      .call(d3.axisLeft(y).ticks(5));
  }, [data, selectedSeries]);

  const handleCheckboxChange = (series: string) => {
    setSelectedSeries(prevState => ({
      ...prevState,
      [series]: !prevState[series],
    }));
  };

  return (
    <div style={{ display: "flex", flexDirection: "column", gap: "20px" }}>
      <div style={{ display: "flex", justifyContent: "space-between", gap: "20px" }}>
        {/* Filters */}
        <div style={{ flex: 1, display: "flex", flexDirection: "column", gap: "10px" }}>
          {seriesNames.map(series => (
            <label key={series} style={{ display: "flex", alignItems: "center", gap: "10px" }}>
              <input
                type="checkbox"
                checked={selectedSeries[series] ?? false}
                onChange={() => handleCheckboxChange(series)}
              />
              <span style={{ color: "#333" }}>{series}</span>
            </label>
          ))}
        </div>

        {/* Chart */}
        <div style={{ flex: 3 }}>
          <svg ref={chartRef} width="800" height="400"></svg>
        </div>
      </div>

      {/* Legends */}
      <div style={{ display: "flex", justifyContent: "center", gap: "20px" }}>
        {seriesNames.map(series => (
          <div key={series} style={{ display: "flex", alignItems: "center", gap: "10px" }}>
            <div style={{
              width: "15px",
              height: "15px",
              backgroundColor: colors(series)!,
            }} />
            <span>{series}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default LinesChart;
