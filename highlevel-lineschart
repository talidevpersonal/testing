import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';

// Type definitions
interface DataPoint {
  date: string;
  category: string;
  value: number;
}

interface LinesChartProps {
  data: DataPoint[];
}

const LinesChart: React.FC<LinesChartProps> = ({ data }) => {
  const chartRef = useRef<SVGSVGElement>(null);
  const [selectedCategories, setSelectedCategories] = useState<Record<string, boolean>>({});

  useEffect(() => {
    const uniqueCategories = Array.from(new Set(data.map(d => d.category)));
    const initialSelection = uniqueCategories.reduce((acc, category) => {
      acc[category] = true;
      return acc;
    }, {} as Record<string, boolean>);
    setSelectedCategories(initialSelection);
  }, [data]);

  useEffect(() => {
    if (!chartRef.current) return;

    const svg = d3.select(chartRef.current);
    svg.selectAll("*").remove(); // Clear existing content

    const width = 800;
    const height = 400;
    const margin = { top: 20, right: 60, bottom: 30, left: 50 };

    const categories = Array.from(new Set(data.map(d => d.category)));
    const colors = d3.scaleOrdinal<string>()
      .domain(categories)
      .range(['#00C6AE', '#D62278', '#c6ae00', '#4b00c6']);

    const parseDate = d3.timeParse("%Y-%m-%d");
    const parseYearMonth = d3.timeParse("%Y-%m");
    const isYearMonthFormat = data.every(d => /^\d{4}-\d{2}$/.test(d.date));

    const parsedData = data.map(d => ({
      ...d,
      parsedDate: isYearMonthFormat ? parseYearMonth(d.date) : parseDate(d.date),
    }));

    const x = d3.scaleTime()
      .domain(d3.extent(parsedData, d => d.parsedDate) as [Date, Date])
      .range([margin.left, width - margin.right]);

    const y = d3.scaleLinear()
      .domain([0, d3.max(parsedData, d => d.value)! * 1.1])
      .range([height - margin.bottom, margin.top]);

    const yRight = d3.scaleLinear()
      .domain([0, d3.max(parsedData.filter(d => d.category === "Limits"), d => d.value)! * 1.1])
      .range([height - margin.bottom, margin.top]);

    const xAxis = (g: d3.Selection<SVGGElement, unknown, null, undefined>) =>
      g.attr("transform", `translate(0,${height - margin.bottom})`)
        .call(d3.axisBottom(x).tickFormat(d => d3.timeFormat(isYearMonthFormat ? "%b" : "%b %d")(d as Date)));

    const yAxis = (g: d3.Selection<SVGGElement, unknown, null, undefined>) =>
      g.attr("transform", `translate(${margin.left},0)`)
        .call(d3.axisLeft(y).ticks(5).tickFormat(d => `${d / 1000000} Mn`));

    const yRightAxis = (g: d3.Selection<SVGGElement, unknown, null, undefined>) =>
      g.attr("transform", `translate(${width - margin.right},0)`)
        .call(d3.axisRight(yRight).ticks(5).tickFormat(d => `${d / 1000000} Mn`));

    svg.append("g").call(xAxis);
    svg.append("g").call(yAxis);
    svg.append("g").call(yRightAxis);

    const line = d3.line<DataPoint>()
      .x(d => x(d.parsedDate as Date))
      .y(d => d.category === "Limits" ? yRight(d.value) : y(d.value));

    const area = d3.area<DataPoint>()
      .x(d => x(d.parsedDate as Date))
      .y0(height - margin.bottom)
      .y1(d => d.category === "Limits" ? yRight(d.value) : y(d.value));

    const defs = svg.append("defs");
    categories.forEach((category, i) => {
      const gradient = defs.append("linearGradient")
        .attr("id", `gradient-${i}`)
        .attr("x1", "0%")
        .attr("y1", "0%")
        .attr("x2", "0%")
        .attr("y2", "100%");

      gradient.append("stop")
        .attr("offset", "0%")
        .attr("stop-color", colors(category)!)
        .attr("stop-opacity", 0.2);

      gradient.append("stop")
        .attr("offset", "100%")
        .attr("stop-color", colors(category)!)
        .attr("stop-opacity", 0);
    });

    categories.forEach((category, i) => {
      if (!selectedCategories[category]) return;

      const categoryData = parsedData.filter(d => d.category === category);

      svg.append("path")
        .datum(categoryData)
        .attr("fill", `url(#gradient-${i})`)
        .attr("d", area);

      svg.append("path")
        .datum(categoryData)
        .attr("fill", "none")
        .attr("stroke", colors(category)!)
        .attr("stroke-width", 2)
        .attr("d", line);
    });
  }, [data, selectedCategories]);

  const handleCheckboxChange = (category: string) => {
    setSelectedCategories(prevState => ({
      ...prevState,
      [category]: !prevState[category],
    }));
  };

  return (
    <div>
      <div style={{ display: "flex", gap: "10px", marginBottom: "10px" }}>
        {Object.keys(selectedCategories).map(category => (
          <label key={category}>
            <input
              type="checkbox"
              checked={selectedCategories[category]}
              onChange={() => handleCheckboxChange(category)}
            />
            {category}
          </label>
        ))}
      </div>
      <svg ref={chartRef} width="800" height="400"></svg>
    </div>
  );
};

export default LinesChart;
